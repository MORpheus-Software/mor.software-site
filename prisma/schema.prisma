datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  name                 String?
  image                String?
  emailVerified        DateTime?
  accounts             Account[]
  wallets              Wallet[]
  stakings             Stake[]
  jobform              JobForm[]
  proposal             Proposal[]
  proofContributions   ProofContribution[]
  jobFormComments      JobFormComment[]
  proposalComments     ProposalComment[]
  notifications        Notification[]        // Add this line
}



model Account {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  token_type        String?
  scope             String?
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Wallet {
  id          String       @id @default(cuid())
  address     String       @unique
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  stakings    Stake[]
  name        String?
  createdAt   DateTime     @default(now())
  maintainers Maintainer[]
}

model Stake {
  id            String   @id @default(cuid())
  duration      Int
  stakedDate    DateTime @default(now())
  lockEndDate   DateTime
  walletId      String
  wallet        Wallet   @relation(fields: [walletId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model JobForm {
  id                  String           @id @default(cuid())
  githubUsername      String
  email               String
  mriNumber           String
  deliverables        JobFormDeliverable[]
  walletAddress       String
  createdAt           DateTime         @default(now())
  userId              String
  status              String           @default("pending")
  user                User             @relation(fields: [userId], references: [id])
  comments            JobFormComment[]
  notifications Notification[]  // Add this line

}

model JobFormDeliverable {
  id                    String         @id @default(cuid())
  jobFormId             String
  jobForm               JobForm        @relation(fields: [jobFormId], references: [id])
  deliverableId         Int
  deliverable           Deliverable    @relation(fields: [deliverableId], references: [id])
  weightsRequested      String
  deliverableDescription String 
  minimumWeightsTime    String    
  description           String    
}

model ProofContribution {
  id                 String   @id @default(cuid())
  githubUsername     String
  walletAddress      String
  email              String
  mriNumber          String
  linksToProof       String
  weightsAgreed      String
  description        String
  createdAt          DateTime @default(now())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
}

model Proposal {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  mri         String           // Keep this as a readable string for legacy purposes
  categoryId  Int
  category    Category         @relation(fields: [categoryId], references: [id])
  deliverables Deliverable[]
  status      String           @default("closed")
  createdAt   DateTime         @default(now())
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  comments    ProposalComment[]
  notifications Notification[]  // Add this line
}

model Deliverable {
  id          Int                @id @default(autoincrement())
  description String
  proposalId  Int
  proposal    Proposal           @relation(fields: [proposalId], references: [id])
  jobFormDeliverables JobFormDeliverable[]
}

model Category {
  id           Int                @id @default(autoincrement())
  name         String             @unique
  description  String?
  proposals    Proposal[]
  maintainers  MaintainerCategory[]
}

model Maintainer {
  id              String               @id @default(cuid())
  walletId        String
  wallet          Wallet               @relation(fields: [walletId], references: [id])
  categories      MaintainerCategory[]
}

model MaintainerCategory {
  maintainerId  String
  maintainer    Maintainer  @relation(fields: [maintainerId], references: [id])
  categoryId    Int
  category      Category    @relation(fields: [categoryId], references: [id])

  @@id([maintainerId, categoryId])
}

model JobFormComment {
  id          String   @id @default(cuid())
  text        String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  jobFormId   String
  jobForm     JobForm  @relation(fields: [jobFormId], references: [id])
}

model ProposalComment {
  id          String   @id @default(cuid())
  text        String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  proposalId  Int
  proposal    Proposal @relation(fields: [proposalId], references: [id])
}



model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  proposalId  Int?     // Optional field for proposal-related notifications
  proposal    Proposal? @relation(fields: [proposalId], references: [id])
  jobFormId   String?  // Optional field for job form-related notifications
  jobForm     JobForm? @relation(fields: [jobFormId], references: [id])
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  type        String?   // Notification type
}

