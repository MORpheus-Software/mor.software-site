datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  image          String?
  emailVerified  DateTime?
  githubAccount  String?  @unique
  accounts       Account[]
  wallets        Wallet[]
  stakings       Stake[]
  bidform  BidForm[]
  proofContributions ProofContribution[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  token_type        String?
  scope             String?
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Wallet {
  id          String   @id @default(cuid())
  address     String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  stakings    Stake[]
  name        String?
  createdAt   DateTime @default(now())
}

model Stake {
  id            String   @id @default(cuid())
  duration      Int
  stakedDate    DateTime @default(now())
  lockEndDate   DateTime
  walletId      String
  wallet        Wallet   @relation(fields: [walletId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model BidForm {
  id                  String   @id @default(cuid())
  githubUsername      String
  email               String
  mriNumber           String
  description         String
  deliverables        String
  deliverableDescriptions        Json
  weightsRequested    String
  walletAddress       String
  minimumWeightsTime  String
  createdAt           DateTime @default(now())
  userId              String
  user                User     @relation(fields: [userId], references: [id])
}

model ProofContribution {
  id                 String   @id @default(cuid())
  githubUsername     String
  walletAddress      String
  email              String
  mriNumber          String
  linksToProof       String
  weightsAgreed      String
  description        String
  createdAt          DateTime @default(now())
  userId              String
  user                User     @relation(fields: [userId], references: [id])
}


model Proposal {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  mri         String
  deliverables Deliverable[]
  status      String        @default("open") // Add status field
  createdAt   DateTime     @default(now())
}

model Deliverable {
  id          Int       @id @default(autoincrement())
  description String
  proposalId  Int
  proposal    Proposal  @relation(fields: [proposalId], references: [id])
}